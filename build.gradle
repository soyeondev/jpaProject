// gradle에서 plugins와 apply plugin은 같은 방법이다.
// 해당 파일은 Groovy 문법을 사용
plugins {
//	id 'org.springframework.boot' version '2.1.15.BUILD-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.springframework.boot' version '2.1.6.RELEASE'
	// source file compile, 단위 테스트, jar파일 생성 등의 단계를 포함한 java plugin
	id 'java'
	id 'war'
}

// war파일 설정
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	// compile 시에만 빌드하고 빌드 결과물에는 포함하지 않음
	compileOnly {
		// dependency에 있는 compileOnly, annotationProcessor를 컴파일 하겠다. -> lombok
		extendsFrom annotationProcessor
	}
}

repositories {
	// 기본 Maven repository를 사용
	mavenCentral()
//	maven { url 'https://repo.spring.io/milestone' }
//	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
/*	 1. compile(api): 의존 라이브러리 수정시에 해당 모듈을 의존중인 모든 모듈들도 리빌드 해야함, 의존성 추가하려는 모듈이 의존중인 모듈까지 접근가능
	 2. implementation
	 	- 의존 라이브러리 수정시에 해당 모듈까지만 리빌드, 의존성 추가하려는 모듈이 의존중인 모듈까지는 접근불가
	  	- 항상 적용
	 3. providedRuntime: runtime시에만 필요하고, 실행환경에서 제공되는 dependency를 설정(war plugin이 설정된 경우에만 사용가능)
	 4. testImplementation: 테스트 코드를 수행할 때만 적용
*/

	// spring
	implementation 'org.springframework.boot:spring-boot-starter-web'	
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// jdbc
	implementation 'mysql:mysql-connector-java:5.1.47'
	implementation 'org.hibernate:hibernate-entitymanager:5.3.7.Final'

	// jsp
	compile 'org.apache.tomcat.embed:tomcat-embed-jasper'	
	compile 'javax.servlet:jstl:1.2'

	compile group: 'org.apache.tomcat', name: 'tomcat-jdbc', version: '9.0.10'

	compileOnly 'org.projectlombok:lombok:1.18.8'
	annotationProcessor 'org.projectlombok:lombok:1.18.8'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
